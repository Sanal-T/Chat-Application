{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SANAL\\\\chat-app\\\\frontend\\\\src\\\\components\\\\chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport socketService from '../services/socket';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport UserList from './UserList';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  username,\n  room,\n  onLeave\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [roomUsers, setRoomUsers] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('connecting');\n  const [currentRoom, setCurrentRoom] = useState(room);\n  const [roomCounts, setRoomCounts] = useState({\n    general: 0,\n    random: 0,\n    tech: 0,\n    gaming: 0\n  });\n  const typingTimeoutRef = useRef(null);\n  const messagesEndRef = useRef(null);\n\n  // Available rooms\n  const availableRooms = [{\n    id: 'general',\n    name: 'General',\n    icon: 'ðŸ’¬'\n  }, {\n    id: 'random',\n    name: 'Random',\n    icon: 'ðŸŽ²'\n  }, {\n    id: 'tech',\n    name: 'Tech',\n    icon: 'ðŸ’»'\n  }, {\n    id: 'gaming',\n    name: 'Gaming',\n    icon: 'ðŸŽ®'\n  }];\n\n  // Scroll to bottom of messages\n  const scrollToBottom = useCallback(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, []);\n\n  // Initialize socket connection\n  useEffect(() => {\n    const initializeConnection = async () => {\n      try {\n        setConnectionStatus('connecting');\n\n        // Connect to socket\n        socketService.connect();\n\n        // Set up event listeners\n        setupSocketListeners();\n\n        // Join initial room\n        socketService.joinRoom(username, currentRoom);\n      } catch (error) {\n        console.error('Failed to initialize connection:', error);\n        setConnectionStatus('disconnected');\n      }\n    };\n    initializeConnection();\n\n    // Cleanup on unmount\n    return () => {\n      if (socketService.isConnected()) {\n        socketService.leaveRoom(username, currentRoom);\n        socketService.disconnect();\n      }\n    };\n  }, [username, currentRoom]);\n\n  // Set up socket event listeners\n  const setupSocketListeners = useCallback(() => {\n    // Connection events\n    socketService.on('connect', () => {\n      console.log('Connected to server');\n      setConnectionStatus('connected');\n    });\n    socketService.on('disconnect', () => {\n      console.log('Disconnected from server');\n      setConnectionStatus('disconnected');\n    });\n    socketService.on('connect_error', error => {\n      console.error('Connection error:', error);\n      setConnectionStatus('disconnected');\n    });\n\n    // Message events\n    socketService.on('message', message => {\n      setMessages(prev => [...prev, message]);\n      setTimeout(scrollToBottom, 100);\n    });\n\n    // User events\n    socketService.on('user_joined', data => {\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        username: 'System',\n        message: `${data.username} joined the chat`,\n        timestamp: data.timestamp,\n        type: 'system'\n      }]);\n    });\n    socketService.on('user_left', data => {\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        username: 'System',\n        message: `${data.username} left the chat`,\n        timestamp: data.timestamp,\n        type: 'system'\n      }]);\n    });\n\n    // Users update\n    socketService.on('users_update', data => {\n      setOnlineUsers(data.users || []);\n    });\n    socketService.on('room_users', data => {\n      if (data.room === currentRoom) {\n        setRoomUsers(data.users || []);\n      }\n    });\n\n    // Channel counts update\n    socketService.on('channel_count', data => {\n      setRoomCounts(prev => ({\n        ...prev,\n        [data.room]: data.count\n      }));\n    });\n\n    // Typing indicators\n    socketService.on('typing', data => {\n      if (data.username !== username && data.room === currentRoom) {\n        setTypingUsers(prev => {\n          if (!prev.includes(data.username)) {\n            return [...prev, data.username];\n          }\n          return prev;\n        });\n      }\n    });\n    socketService.on('stop_typing', data => {\n      if (data.username !== username && data.room === currentRoom) {\n        setTypingUsers(prev => prev.filter(user => user !== data.username));\n      }\n    });\n\n    // Error handling\n    socketService.on('error', error => {\n      console.error('Socket error:', error);\n    });\n  }, [username, currentRoom, scrollToBottom]);\n\n  // Handle sending messages\n  const handleSendMessage = useCallback(message => {\n    if (!message.trim() || !socketService.isConnected()) {\n      return;\n    }\n    try {\n      socketService.sendMessage(username, currentRoom, message);\n      // Stop typing indicator\n      socketService.stopTyping(username, currentRoom);\n    } catch (error) {\n      console.error('Failed to send message:', error);\n    }\n  }, [username, currentRoom]);\n\n  // Handle typing\n  const handleTyping = useCallback(() => {\n    if (!socketService.isConnected()) return;\n    socketService.startTyping(username, currentRoom);\n\n    // Clear existing timeout\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n\n    // Set timeout to stop typing\n    typingTimeoutRef.current = setTimeout(() => {\n      socketService.stopTyping(username, currentRoom);\n    }, 1000);\n  }, [username, currentRoom]);\n\n  // Handle room switching\n  const handleRoomSwitch = useCallback(newRoom => {\n    if (newRoom === currentRoom || !socketService.isConnected()) {\n      return;\n    }\n    try {\n      // Leave current room\n      socketService.leaveRoom(username, currentRoom);\n\n      // Clear messages and typing indicators\n      setMessages([]);\n      setTypingUsers([]);\n      setRoomUsers([]);\n\n      // Join new room\n      socketService.joinRoom(username, newRoom);\n      setCurrentRoom(newRoom);\n    } catch (error) {\n      console.error('Failed to switch room:', error);\n    }\n  }, [username, currentRoom]);\n\n  // Handle logout\n  const handleLogout = useCallback(() => {\n    try {\n      if (socketService.isConnected()) {\n        socketService.leaveRoom(username, currentRoom);\n        socketService.disconnect();\n      }\n      onLeave();\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Force logout even if there's an error\n      onLeave();\n    }\n  }, [username, currentRoom, onLeave]);\n\n  // Connection status indicator\n  const getConnectionStatusColor = () => {\n    switch (connectionStatus) {\n      case 'connected':\n        return '#27ae60';\n      case 'connecting':\n        return '#f39c12';\n      case 'disconnected':\n        return '#e74c3c';\n      default:\n        return '#95a5a6';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connection-status\",\n      style: {\n        backgroundColor: getConnectionStatusColor()\n      },\n      children: connectionStatus === 'connected' ? 'ðŸŸ¢ Connected' : connectionStatus === 'connecting' ? 'ðŸŸ¡ Connecting...' : 'ðŸ”´ Disconnected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83D\\uDE80 FlashTalk\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-avatar\",\n            children: username.charAt(0).toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"username\",\n              children: username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-stats\",\n              children: [\"Online: \", onlineUsers.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logout-btn\",\n          onClick: handleLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channels\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83D\\uDCCB Channels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), availableRooms.map(roomInfo => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `channel-item ${currentRoom === roomInfo.id ? 'active' : ''}`,\n          onClick: () => handleRoomSwitch(roomInfo.id),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [roomInfo.icon, \" \", roomInfo.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"channel-count\",\n            children: roomCounts[roomInfo.id] || 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this)]\n        }, roomInfo.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        users: roomUsers,\n        currentUser: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-title\",\n          children: [\"#\", currentRoom]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-info\",\n          children: [roomUsers.length, \" member\", roomUsers.length !== 1 ? 's' : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-area\",\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: messages,\n          currentUser: username,\n          typingUsers: typingUsers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSendMessage: handleSendMessage,\n        onTyping: handleTyping,\n        disabled: connectionStatus !== 'connected'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"lW+mLrh8eWqtIYw+c9VA2t5Q/yE=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","socketService","MessageList","MessageInput","UserList","jsxDEV","_jsxDEV","Chat","username","room","onLeave","_s","messages","setMessages","onlineUsers","setOnlineUsers","roomUsers","setRoomUsers","typingUsers","setTypingUsers","connectionStatus","setConnectionStatus","currentRoom","setCurrentRoom","roomCounts","setRoomCounts","general","random","tech","gaming","typingTimeoutRef","messagesEndRef","availableRooms","id","name","icon","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","initializeConnection","connect","setupSocketListeners","joinRoom","error","console","isConnected","leaveRoom","disconnect","on","log","message","prev","setTimeout","data","Date","now","timestamp","type","users","count","includes","filter","user","handleSendMessage","trim","sendMessage","stopTyping","handleTyping","startTyping","clearTimeout","handleRoomSwitch","newRoom","handleLogout","getConnectionStatusColor","className","children","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","charAt","toUpperCase","length","onClick","map","roomInfo","currentUser","ref","onSendMessage","onTyping","disabled","_c","$RefreshReg$"],"sources":["C:/Users/SANAL/chat-app/frontend/src/components/chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport socketService from '../services/socket';\r\nimport MessageList from './MessageList';\r\nimport MessageInput from './MessageInput';\r\nimport UserList from './UserList';\r\nimport './Chat.css';\r\n\r\nconst Chat = ({ username, room, onLeave }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [onlineUsers, setOnlineUsers] = useState([]);\r\n  const [roomUsers, setRoomUsers] = useState([]);\r\n  const [typingUsers, setTypingUsers] = useState([]);\r\n  const [connectionStatus, setConnectionStatus] = useState('connecting');\r\n  const [currentRoom, setCurrentRoom] = useState(room);\r\n  const [roomCounts, setRoomCounts] = useState({\r\n    general: 0,\r\n    random: 0,\r\n    tech: 0,\r\n    gaming: 0\r\n  });\r\n\r\n  const typingTimeoutRef = useRef(null);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // Available rooms\r\n  const availableRooms = [\r\n    { id: 'general', name: 'General', icon: 'ðŸ’¬' },\r\n    { id: 'random', name: 'Random', icon: 'ðŸŽ²' },\r\n    { id: 'tech', name: 'Tech', icon: 'ðŸ’»' },\r\n    { id: 'gaming', name: 'Gaming', icon: 'ðŸŽ®' }\r\n  ];\r\n\r\n  // Scroll to bottom of messages\r\n  const scrollToBottom = useCallback(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, []);\r\n\r\n  // Initialize socket connection\r\n  useEffect(() => {\r\n    const initializeConnection = async () => {\r\n      try {\r\n        setConnectionStatus('connecting');\r\n        \r\n        // Connect to socket\r\n        socketService.connect();\r\n        \r\n        // Set up event listeners\r\n        setupSocketListeners();\r\n        \r\n        // Join initial room\r\n        socketService.joinRoom(username, currentRoom);\r\n        \r\n      } catch (error) {\r\n        console.error('Failed to initialize connection:', error);\r\n        setConnectionStatus('disconnected');\r\n      }\r\n    };\r\n\r\n    initializeConnection();\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      if (socketService.isConnected()) {\r\n        socketService.leaveRoom(username, currentRoom);\r\n        socketService.disconnect();\r\n      }\r\n    };\r\n  }, [username, currentRoom]);\r\n\r\n  // Set up socket event listeners\r\n  const setupSocketListeners = useCallback(() => {\r\n    // Connection events\r\n    socketService.on('connect', () => {\r\n      console.log('Connected to server');\r\n      setConnectionStatus('connected');\r\n    });\r\n\r\n    socketService.on('disconnect', () => {\r\n      console.log('Disconnected from server');\r\n      setConnectionStatus('disconnected');\r\n    });\r\n\r\n    socketService.on('connect_error', (error) => {\r\n      console.error('Connection error:', error);\r\n      setConnectionStatus('disconnected');\r\n    });\r\n\r\n    // Message events\r\n    socketService.on('message', (message) => {\r\n      setMessages(prev => [...prev, message]);\r\n      setTimeout(scrollToBottom, 100);\r\n    });\r\n\r\n    // User events\r\n    socketService.on('user_joined', (data) => {\r\n      setMessages(prev => [...prev, {\r\n        id: Date.now(),\r\n        username: 'System',\r\n        message: `${data.username} joined the chat`,\r\n        timestamp: data.timestamp,\r\n        type: 'system'\r\n      }]);\r\n    });\r\n\r\n    socketService.on('user_left', (data) => {\r\n      setMessages(prev => [...prev, {\r\n        id: Date.now(),\r\n        username: 'System',\r\n        message: `${data.username} left the chat`,\r\n        timestamp: data.timestamp,\r\n        type: 'system'\r\n      }]);\r\n    });\r\n\r\n    // Users update\r\n    socketService.on('users_update', (data) => {\r\n      setOnlineUsers(data.users || []);\r\n    });\r\n\r\n    socketService.on('room_users', (data) => {\r\n      if (data.room === currentRoom) {\r\n        setRoomUsers(data.users || []);\r\n      }\r\n    });\r\n\r\n    // Channel counts update\r\n    socketService.on('channel_count', (data) => {\r\n      setRoomCounts(prev => ({\r\n        ...prev,\r\n        [data.room]: data.count\r\n      }));\r\n    });\r\n\r\n    // Typing indicators\r\n    socketService.on('typing', (data) => {\r\n      if (data.username !== username && data.room === currentRoom) {\r\n        setTypingUsers(prev => {\r\n          if (!prev.includes(data.username)) {\r\n            return [...prev, data.username];\r\n          }\r\n          return prev;\r\n        });\r\n      }\r\n    });\r\n\r\n    socketService.on('stop_typing', (data) => {\r\n      if (data.username !== username && data.room === currentRoom) {\r\n        setTypingUsers(prev => prev.filter(user => user !== data.username));\r\n      }\r\n    });\r\n\r\n    // Error handling\r\n    socketService.on('error', (error) => {\r\n      console.error('Socket error:', error);\r\n    });\r\n  }, [username, currentRoom, scrollToBottom]);\r\n\r\n  // Handle sending messages\r\n  const handleSendMessage = useCallback((message) => {\r\n    if (!message.trim() || !socketService.isConnected()) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      socketService.sendMessage(username, currentRoom, message);\r\n      // Stop typing indicator\r\n      socketService.stopTyping(username, currentRoom);\r\n    } catch (error) {\r\n      console.error('Failed to send message:', error);\r\n    }\r\n  }, [username, currentRoom]);\r\n\r\n  // Handle typing\r\n  const handleTyping = useCallback(() => {\r\n    if (!socketService.isConnected()) return;\r\n\r\n    socketService.startTyping(username, currentRoom);\r\n\r\n    // Clear existing timeout\r\n    if (typingTimeoutRef.current) {\r\n      clearTimeout(typingTimeoutRef.current);\r\n    }\r\n\r\n    // Set timeout to stop typing\r\n    typingTimeoutRef.current = setTimeout(() => {\r\n      socketService.stopTyping(username, currentRoom);\r\n    }, 1000);\r\n  }, [username, currentRoom]);\r\n\r\n  // Handle room switching\r\n  const handleRoomSwitch = useCallback((newRoom) => {\r\n    if (newRoom === currentRoom || !socketService.isConnected()) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Leave current room\r\n      socketService.leaveRoom(username, currentRoom);\r\n      \r\n      // Clear messages and typing indicators\r\n      setMessages([]);\r\n      setTypingUsers([]);\r\n      setRoomUsers([]);\r\n      \r\n      // Join new room\r\n      socketService.joinRoom(username, newRoom);\r\n      setCurrentRoom(newRoom);\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to switch room:', error);\r\n    }\r\n  }, [username, currentRoom]);\r\n\r\n  // Handle logout\r\n  const handleLogout = useCallback(() => {\r\n    try {\r\n      if (socketService.isConnected()) {\r\n        socketService.leaveRoom(username, currentRoom);\r\n        socketService.disconnect();\r\n      }\r\n      onLeave();\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      // Force logout even if there's an error\r\n      onLeave();\r\n    }\r\n  }, [username, currentRoom, onLeave]);\r\n\r\n  // Connection status indicator\r\n  const getConnectionStatusColor = () => {\r\n    switch (connectionStatus) {\r\n      case 'connected': return '#27ae60';\r\n      case 'connecting': return '#f39c12';\r\n      case 'disconnected': return '#e74c3c';\r\n      default: return '#95a5a6';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      {/* Connection Status */}\r\n      <div \r\n        className=\"connection-status\"\r\n        style={{ backgroundColor: getConnectionStatusColor() }}\r\n      >\r\n        {connectionStatus === 'connected' ? 'ðŸŸ¢ Connected' : \r\n         connectionStatus === 'connecting' ? 'ðŸŸ¡ Connecting...' : \r\n         'ðŸ”´ Disconnected'}\r\n      </div>\r\n\r\n      {/* Sidebar */}\r\n      <div className=\"sidebar\">\r\n        <div className=\"sidebar-header\">\r\n          <h2>ðŸš€ FlashTalk</h2>\r\n          <div className=\"user-info\">\r\n            <div className=\"user-avatar\">\r\n              {username.charAt(0).toUpperCase()}\r\n            </div>\r\n            <div className=\"user-details\">\r\n              <div className=\"username\">{username}</div>\r\n              <div className=\"user-stats\">\r\n                Online: {onlineUsers.length}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <button className=\"logout-btn\" onClick={handleLogout}>\r\n            Logout\r\n          </button>\r\n        </div>\r\n\r\n        {/* Channels */}\r\n        <div className=\"channels\">\r\n          <h3>ðŸ“‹ Channels</h3>\r\n          {availableRooms.map(roomInfo => (\r\n            <div\r\n              key={roomInfo.id}\r\n              className={`channel-item ${currentRoom === roomInfo.id ? 'active' : ''}`}\r\n              onClick={() => handleRoomSwitch(roomInfo.id)}\r\n            >\r\n              <span>{roomInfo.icon} {roomInfo.name}</span>\r\n              <span className=\"channel-count\">\r\n                {roomCounts[roomInfo.id] || 0}\r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Online Users */}\r\n        <UserList users={roomUsers} currentUser={username} />\r\n      </div>\r\n\r\n      {/* Main Chat Area */}\r\n      <div className=\"main-content\">\r\n        {/* Chat Header */}\r\n        <div className=\"chat-header\">\r\n          <div className=\"chat-title\">\r\n            #{currentRoom}\r\n          </div>\r\n          <div className=\"chat-info\">\r\n            {roomUsers.length} member{roomUsers.length !== 1 ? 's' : ''}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Messages */}\r\n        <div className=\"messages-area\">\r\n          <MessageList \r\n            messages={messages} \r\n            currentUser={username}\r\n            typingUsers={typingUsers}\r\n          />\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n\r\n        {/* Message Input */}\r\n        <MessageInput \r\n          onSendMessage={handleSendMessage}\r\n          onTyping={handleTyping}\r\n          disabled={connectionStatus !== 'connected'}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}