{"ast":null,"code":"import { io } from 'socket.io-client';\nlet socket = null;\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\nexport const initializeSocket = user => {\n  try {\n    if (socket) {\n      socket.disconnect();\n    }\n    socket = io(SOCKET_URL, {\n      autoConnect: true,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      maxReconnectionAttempts: 5,\n      timeout: 20000,\n      forceNew: true\n    });\n\n    // Add connection event listeners\n    socket.on('connect', () => {\n      console.log('Connected to server');\n      if (user) {\n        socket.emit('user_connected', user);\n      }\n    });\n    socket.on('disconnect', reason => {\n      console.log('Disconnected from server:', reason);\n    });\n    socket.on('connect_error', error => {\n      console.error('Connection error:', error);\n    });\n    socket.on('reconnect', attemptNumber => {\n      console.log('Reconnected after', attemptNumber, 'attempts');\n    });\n    socket.on('reconnect_error', error => {\n      console.error('Reconnection failed:', error);\n    });\n    socket.on('reconnect_failed', () => {\n      console.error('Failed to reconnect to server');\n    });\n    return socket;\n  } catch (error) {\n    console.error('Error initializing socket:', error);\n    return null;\n  }\n};\nexport const getSocket = () => {\n  return socket;\n};\nexport const disconnectSocket = () => {\n  try {\n    if (socket) {\n      socket.disconnect();\n      socket = null;\n    }\n  } catch (error) {\n    console.error('Error disconnecting socket:', error);\n  }\n};\nexport const emitMessage = (event, data) => {\n  try {\n    if (socket && socket.connected) {\n      socket.emit(event, data);\n      return true;\n    } else {\n      console.warn('Socket not connected. Cannot emit:', event);\n      return false;\n    }\n  } catch (error) {\n    console.error('Error emitting message:', error);\n    return false;\n  }\n};\nexport const onMessage = (event, callback) => {\n  try {\n    if (socket) {\n      socket.on(event, callback);\n      return true;\n    } else {\n      console.warn('Socket not available for listening to:', event);\n      return false;\n    }\n  } catch (error) {\n    console.error('Error setting up message listener:', error);\n    return false;\n  }\n};\nexport const offMessage = (event, callback) => {\n  try {\n    if (socket) {\n      if (callback) {\n        socket.off(event, callback);\n      } else {\n        socket.off(event);\n      }\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error('Error removing message listener:', error);\n    return false;\n  }\n};\nexport const isSocketConnected = () => {\n  return socket && socket.connected;\n};","map":{"version":3,"names":["io","socket","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","initializeSocket","user","disconnect","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","maxReconnectionAttempts","timeout","forceNew","on","console","log","emit","reason","error","attemptNumber","getSocket","disconnectSocket","emitMessage","event","data","connected","warn","onMessage","callback","offMessage","off","isSocketConnected"],"sources":["C:/Users/SANAL/chat-app/frontend/src/services/socket.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nlet socket = null;\r\n\r\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\r\n\r\nexport const initializeSocket = (user) => {\r\n  try {\r\n    if (socket) {\r\n      socket.disconnect();\r\n    }\r\n\r\n    socket = io(SOCKET_URL, {\r\n      autoConnect: true,\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000,\r\n      reconnectionDelayMax: 5000,\r\n      maxReconnectionAttempts: 5,\r\n      timeout: 20000,\r\n      forceNew: true\r\n    });\r\n\r\n    // Add connection event listeners\r\n    socket.on('connect', () => {\r\n      console.log('Connected to server');\r\n      if (user) {\r\n        socket.emit('user_connected', user);\r\n      }\r\n    });\r\n\r\n    socket.on('disconnect', (reason) => {\r\n      console.log('Disconnected from server:', reason);\r\n    });\r\n\r\n    socket.on('connect_error', (error) => {\r\n      console.error('Connection error:', error);\r\n    });\r\n\r\n    socket.on('reconnect', (attemptNumber) => {\r\n      console.log('Reconnected after', attemptNumber, 'attempts');\r\n    });\r\n\r\n    socket.on('reconnect_error', (error) => {\r\n      console.error('Reconnection failed:', error);\r\n    });\r\n\r\n    socket.on('reconnect_failed', () => {\r\n      console.error('Failed to reconnect to server');\r\n    });\r\n\r\n    return socket;\r\n  } catch (error) {\r\n    console.error('Error initializing socket:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getSocket = () => {\r\n  return socket;\r\n};\r\n\r\nexport const disconnectSocket = () => {\r\n  try {\r\n    if (socket) {\r\n      socket.disconnect();\r\n      socket = null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error disconnecting socket:', error);\r\n  }\r\n};\r\n\r\nexport const emitMessage = (event, data) => {\r\n  try {\r\n    if (socket && socket.connected) {\r\n      socket.emit(event, data);\r\n      return true;\r\n    } else {\r\n      console.warn('Socket not connected. Cannot emit:', event);\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error emitting message:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const onMessage = (event, callback) => {\r\n  try {\r\n    if (socket) {\r\n      socket.on(event, callback);\r\n      return true;\r\n    } else {\r\n      console.warn('Socket not available for listening to:', event);\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error setting up message listener:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const offMessage = (event, callback) => {\r\n  try {\r\n    if (socket) {\r\n      if (callback) {\r\n        socket.off(event, callback);\r\n      } else {\r\n        socket.off(event);\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  } catch (error) {\r\n    console.error('Error removing message listener:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const isSocketConnected = () => {\r\n  return socket && socket.connected;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}