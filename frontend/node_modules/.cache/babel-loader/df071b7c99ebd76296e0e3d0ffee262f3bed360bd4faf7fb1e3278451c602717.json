{"ast":null,"code":"// frontend/src/services/socket.js\nimport { io } from 'socket.io-client';\nlet socket = null;\n\n// Debug: Check what URL we're trying to connect to\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\nconsole.log('Attempting to connect to:', SOCKET_URL);\nexport const initializeSocket = user => {\n  try {\n    if (socket) {\n      socket.disconnect();\n    }\n    console.log('Initializing socket connection...');\n    socket = io(SOCKET_URL, {\n      autoConnect: true,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      maxReconnectionAttempts: 5,\n      timeout: 20000,\n      forceNew: true,\n      // Add CORS settings\n      withCredentials: false,\n      transports: ['websocket', 'polling']\n    });\n\n    // Enhanced connection event listeners with debugging\n    socket.on('connect', () => {\n      console.log('✅ Connected to server successfully');\n      console.log('Socket ID:', socket.id);\n      if (user) {\n        socket.emit('user_connected', user);\n      }\n    });\n    socket.on('disconnect', reason => {\n      console.log('❌ Disconnected from server:', reason);\n    });\n    socket.on('connect_error', error => {\n      console.error('🔥 Connection error:', error);\n      console.error('Error type:', error.type);\n      console.error('Error description:', error.description);\n      console.error('Error context:', error.context);\n      console.error('Error transport:', error.transport);\n    });\n    socket.on('reconnect', attemptNumber => {\n      console.log('🔄 Reconnected after', attemptNumber, 'attempts');\n    });\n    socket.on('reconnect_error', error => {\n      console.error('🔄❌ Reconnection failed:', error);\n    });\n    socket.on('reconnect_failed', () => {\n      console.error('🔄💀 Failed to reconnect to server after all attempts');\n    });\n\n    // Test connection immediately\n    setTimeout(() => {\n      if (socket.connected) {\n        console.log('✅ Socket connection verified');\n      } else {\n        console.error('❌ Socket failed to connect within timeout');\n        console.log('Socket state:', {\n          connected: socket.connected,\n          disconnected: socket.disconnected,\n          id: socket.id\n        });\n      }\n    }, 3000);\n    return socket;\n  } catch (error) {\n    console.error('💥 Error initializing socket:', error);\n    return null;\n  }\n};\nexport const getSocket = () => {\n  return socket;\n};\nexport const disconnectSocket = () => {\n  try {\n    if (socket) {\n      socket.disconnect();\n      socket = null;\n      console.log('Socket disconnected and cleared');\n    }\n  } catch (error) {\n    console.error('Error disconnecting socket:', error);\n  }\n};\nexport const emitMessage = (event, data) => {\n  try {\n    if (socket && socket.connected) {\n      console.log(`📤 Emitting: ${event}`, data);\n      socket.emit(event, data);\n      return true;\n    } else {\n      var _socket, _socket2;\n      console.warn(`📤❌ Cannot emit ${event}: Socket not connected`);\n      console.log('Socket state:', {\n        exists: !!socket,\n        connected: (_socket = socket) === null || _socket === void 0 ? void 0 : _socket.connected,\n        disconnected: (_socket2 = socket) === null || _socket2 === void 0 ? void 0 : _socket2.disconnected\n      });\n      return false;\n    }\n  } catch (error) {\n    console.error('Error emitting message:', error);\n    return false;\n  }\n};\nexport const onMessage = (event, callback) => {\n  try {\n    if (socket) {\n      console.log(`📥 Listening for: ${event}`);\n      socket.on(event, callback);\n      return true;\n    } else {\n      console.warn(`📥❌ Cannot listen for ${event}: Socket not available`);\n      return false;\n    }\n  } catch (error) {\n    console.error('Error setting up message listener:', error);\n    return false;\n  }\n};\nexport const offMessage = (event, callback) => {\n  try {\n    if (socket) {\n      if (callback) {\n        socket.off(event, callback);\n      } else {\n        socket.off(event);\n      }\n      console.log(`📥🔇 Stopped listening for: ${event}`);\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error('Error removing message listener:', error);\n    return false;\n  }\n};\nexport const isSocketConnected = () => {\n  const connected = socket && socket.connected;\n  console.log('Socket connection check:', connected);\n  return connected;\n};","map":{"version":3,"names":["io","socket","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","console","log","initializeSocket","user","disconnect","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","maxReconnectionAttempts","timeout","forceNew","withCredentials","transports","on","id","emit","reason","error","type","description","context","transport","attemptNumber","setTimeout","connected","disconnected","getSocket","disconnectSocket","emitMessage","event","data","_socket","_socket2","warn","exists","onMessage","callback","offMessage","off","isSocketConnected"],"sources":["C:/Users/SANAL/chat-app/frontend/src/services/socket.js"],"sourcesContent":["// frontend/src/services/socket.js\r\nimport { io } from 'socket.io-client';\r\n\r\nlet socket = null;\r\n\r\n// Debug: Check what URL we're trying to connect to\r\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\r\nconsole.log('Attempting to connect to:', SOCKET_URL);\r\n\r\nexport const initializeSocket = (user) => {\r\n  try {\r\n    if (socket) {\r\n      socket.disconnect();\r\n    }\r\n\r\n    console.log('Initializing socket connection...');\r\n    \r\n    socket = io(SOCKET_URL, {\r\n      autoConnect: true,\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000,\r\n      reconnectionDelayMax: 5000,\r\n      maxReconnectionAttempts: 5,\r\n      timeout: 20000,\r\n      forceNew: true,\r\n      // Add CORS settings\r\n      withCredentials: false,\r\n      transports: ['websocket', 'polling']\r\n    });\r\n\r\n    // Enhanced connection event listeners with debugging\r\n    socket.on('connect', () => {\r\n      console.log('✅ Connected to server successfully');\r\n      console.log('Socket ID:', socket.id);\r\n      if (user) {\r\n        socket.emit('user_connected', user);\r\n      }\r\n    });\r\n\r\n    socket.on('disconnect', (reason) => {\r\n      console.log('❌ Disconnected from server:', reason);\r\n    });\r\n\r\n    socket.on('connect_error', (error) => {\r\n      console.error('🔥 Connection error:', error);\r\n      console.error('Error type:', error.type);\r\n      console.error('Error description:', error.description);\r\n      console.error('Error context:', error.context);\r\n      console.error('Error transport:', error.transport);\r\n    });\r\n\r\n    socket.on('reconnect', (attemptNumber) => {\r\n      console.log('🔄 Reconnected after', attemptNumber, 'attempts');\r\n    });\r\n\r\n    socket.on('reconnect_error', (error) => {\r\n      console.error('🔄❌ Reconnection failed:', error);\r\n    });\r\n\r\n    socket.on('reconnect_failed', () => {\r\n      console.error('🔄💀 Failed to reconnect to server after all attempts');\r\n    });\r\n\r\n    // Test connection immediately\r\n    setTimeout(() => {\r\n      if (socket.connected) {\r\n        console.log('✅ Socket connection verified');\r\n      } else {\r\n        console.error('❌ Socket failed to connect within timeout');\r\n        console.log('Socket state:', {\r\n          connected: socket.connected,\r\n          disconnected: socket.disconnected,\r\n          id: socket.id\r\n        });\r\n      }\r\n    }, 3000);\r\n\r\n    return socket;\r\n  } catch (error) {\r\n    console.error('💥 Error initializing socket:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getSocket = () => {\r\n  return socket;\r\n};\r\n\r\nexport const disconnectSocket = () => {\r\n  try {\r\n    if (socket) {\r\n      socket.disconnect();\r\n      socket = null;\r\n      console.log('Socket disconnected and cleared');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error disconnecting socket:', error);\r\n  }\r\n};\r\n\r\nexport const emitMessage = (event, data) => {\r\n  try {\r\n    if (socket && socket.connected) {\r\n      console.log(`📤 Emitting: ${event}`, data);\r\n      socket.emit(event, data);\r\n      return true;\r\n    } else {\r\n      console.warn(`📤❌ Cannot emit ${event}: Socket not connected`);\r\n      console.log('Socket state:', {\r\n        exists: !!socket,\r\n        connected: socket?.connected,\r\n        disconnected: socket?.disconnected\r\n      });\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error emitting message:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const onMessage = (event, callback) => {\r\n  try {\r\n    if (socket) {\r\n      console.log(`📥 Listening for: ${event}`);\r\n      socket.on(event, callback);\r\n      return true;\r\n    } else {\r\n      console.warn(`📥❌ Cannot listen for ${event}: Socket not available`);\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error setting up message listener:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const offMessage = (event, callback) => {\r\n  try {\r\n    if (socket) {\r\n      if (callback) {\r\n        socket.off(event, callback);\r\n      } else {\r\n        socket.off(event);\r\n      }\r\n      console.log(`📥🔇 Stopped listening for: ${event}`);\r\n      return true;\r\n    }\r\n    return false;\r\n  } catch (error) {\r\n    console.error('Error removing message listener:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const isSocketConnected = () => {\r\n  const connected = socket && socket.connected;\r\n  console.log('Socket connection check:', connected);\r\n  return connected;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}