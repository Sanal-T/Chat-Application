{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n  }\n  connect(serverUrl = 'http://localhost:3001') {\n    try {\n      if (this.socket) {\n        this.disconnect();\n      }\n      this.socket = io(serverUrl, {\n        autoConnect: true,\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000,\n        reconnectionDelayMax: 5000,\n        timeout: 20000,\n        transports: ['websocket', 'polling']\n      });\n      this.setupEventListeners();\n      return this.socket;\n    } catch (error) {\n      console.error('Socket connection error:', error);\n      throw error;\n    }\n  }\n  setupEventListeners() {\n    if (!this.socket) return;\n    this.socket.on('connect', () => {\n      console.log('✅ Connected to server:', this.socket.id);\n    });\n    this.socket.on('disconnect', reason => {\n      console.log('❌ Disconnected from server:', reason);\n    });\n    this.socket.on('connect_error', error => {\n      console.error('🔥 Connection error:', error);\n    });\n    this.socket.on('reconnect', attemptNumber => {\n      console.log('🔄 Reconnected to server, attempt:', attemptNumber);\n    });\n    this.socket.on('reconnect_error', error => {\n      console.error('🔥 Reconnection error:', error);\n    });\n  }\n\n  // Join a room\n  joinRoom(username, room) {\n    if (this.socket && this.socket.connected) {\n      this.socket.emit('join_room', {\n        username,\n        room\n      });\n    } else {\n      console.error('Socket not connected - cannot join room');\n    }\n  }\n\n  // Leave a room\n  leaveRoom(username, room) {\n    if (this.socket && this.socket.connected) {\n      this.socket.emit('leave_room', {\n        username,\n        room\n      });\n    }\n  }\n\n  // Send a message\n  sendMessage(username, room, message) {\n    if (this.socket && this.socket.connected) {\n      this.socket.emit('send_message', {\n        username,\n        room,\n        message,\n        timestamp: new Date().toISOString()\n      });\n    } else {\n      console.error('Socket not connected - cannot send message');\n      throw new Error('Not connected to server');\n    }\n  }\n\n  // Typing indicators\n  startTyping(username, room) {\n    if (this.socket && this.socket.connected) {\n      this.socket.emit('typing', {\n        username,\n        room\n      });\n    }\n  }\n  stopTyping(username, room) {\n    if (this.socket && this.socket.connected) {\n      this.socket.emit('stop_typing', {\n        username,\n        room\n      });\n    }\n  }\n\n  // Event listeners\n  on(event, callback) {\n    if (this.socket) {\n      this.socket.on(event, callback);\n      // Store callback for cleanup\n      if (!this.listeners.has(event)) {\n        this.listeners.set(event, new Set());\n      }\n      this.listeners.get(event).add(callback);\n    }\n  }\n  off(event, callback) {\n    if (this.socket) {\n      this.socket.off(event, callback);\n      if (this.listeners.has(event)) {\n        this.listeners.get(event).delete(callback);\n      }\n    }\n  }\n\n  // Remove all listeners for an event\n  removeAllListeners(event) {\n    if (this.socket) {\n      this.socket.removeAllListeners(event);\n      this.listeners.delete(event);\n    }\n  }\n\n  // Get connection status\n  isConnected() {\n    return this.socket && this.socket.connected;\n  }\n\n  // Get socket ID\n  getSocketId() {\n    return this.socket ? this.socket.id : null;\n  }\n\n  // Disconnect\n  disconnect() {\n    if (this.socket) {\n      // Clean up all listeners\n      this.listeners.forEach((callbacks, event) => {\n        callbacks.forEach(callback => {\n          this.socket.off(event, callback);\n        });\n      });\n      this.listeners.clear();\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  // Force reconnection\n  reconnect() {\n    if (this.socket) {\n      this.socket.connect();\n    }\n  }\n}\n\n// Create singleton instance\nconst socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","listeners","Map","connect","serverUrl","disconnect","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","timeout","transports","setupEventListeners","error","console","on","log","id","reason","attemptNumber","joinRoom","username","room","connected","emit","leaveRoom","sendMessage","message","timestamp","Date","toISOString","Error","startTyping","stopTyping","event","callback","has","set","Set","get","add","off","delete","removeAllListeners","isConnected","getSocketId","forEach","callbacks","clear","reconnect","socketService"],"sources":["C:/Users/SANAL/chat-app/frontend/src/services/socket.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.listeners = new Map();\r\n  }\r\n\r\n  connect(serverUrl = 'http://localhost:3001') {\r\n    try {\r\n      if (this.socket) {\r\n        this.disconnect();\r\n      }\r\n\r\n      this.socket = io(serverUrl, {\r\n        autoConnect: true,\r\n        reconnection: true,\r\n        reconnectionAttempts: 5,\r\n        reconnectionDelay: 1000,\r\n        reconnectionDelayMax: 5000,\r\n        timeout: 20000,\r\n        transports: ['websocket', 'polling']\r\n      });\r\n\r\n      this.setupEventListeners();\r\n      return this.socket;\r\n    } catch (error) {\r\n      console.error('Socket connection error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  setupEventListeners() {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('✅ Connected to server:', this.socket.id);\r\n    });\r\n\r\n    this.socket.on('disconnect', (reason) => {\r\n      console.log('❌ Disconnected from server:', reason);\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('🔥 Connection error:', error);\r\n    });\r\n\r\n    this.socket.on('reconnect', (attemptNumber) => {\r\n      console.log('🔄 Reconnected to server, attempt:', attemptNumber);\r\n    });\r\n\r\n    this.socket.on('reconnect_error', (error) => {\r\n      console.error('🔥 Reconnection error:', error);\r\n    });\r\n  }\r\n\r\n  // Join a room\r\n  joinRoom(username, room) {\r\n    if (this.socket && this.socket.connected) {\r\n      this.socket.emit('join_room', { username, room });\r\n    } else {\r\n      console.error('Socket not connected - cannot join room');\r\n    }\r\n  }\r\n\r\n  // Leave a room\r\n  leaveRoom(username, room) {\r\n    if (this.socket && this.socket.connected) {\r\n      this.socket.emit('leave_room', { username, room });\r\n    }\r\n  }\r\n\r\n  // Send a message\r\n  sendMessage(username, room, message) {\r\n    if (this.socket && this.socket.connected) {\r\n      this.socket.emit('send_message', {\r\n        username,\r\n        room,\r\n        message,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n    } else {\r\n      console.error('Socket not connected - cannot send message');\r\n      throw new Error('Not connected to server');\r\n    }\r\n  }\r\n\r\n  // Typing indicators\r\n  startTyping(username, room) {\r\n    if (this.socket && this.socket.connected) {\r\n      this.socket.emit('typing', { username, room });\r\n    }\r\n  }\r\n\r\n  stopTyping(username, room) {\r\n    if (this.socket && this.socket.connected) {\r\n      this.socket.emit('stop_typing', { username, room });\r\n    }\r\n  }\r\n\r\n  // Event listeners\r\n  on(event, callback) {\r\n    if (this.socket) {\r\n      this.socket.on(event, callback);\r\n      // Store callback for cleanup\r\n      if (!this.listeners.has(event)) {\r\n        this.listeners.set(event, new Set());\r\n      }\r\n      this.listeners.get(event).add(callback);\r\n    }\r\n  }\r\n\r\n  off(event, callback) {\r\n    if (this.socket) {\r\n      this.socket.off(event, callback);\r\n      if (this.listeners.has(event)) {\r\n        this.listeners.get(event).delete(callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove all listeners for an event\r\n  removeAllListeners(event) {\r\n    if (this.socket) {\r\n      this.socket.removeAllListeners(event);\r\n      this.listeners.delete(event);\r\n    }\r\n  }\r\n\r\n  // Get connection status\r\n  isConnected() {\r\n    return this.socket && this.socket.connected;\r\n  }\r\n\r\n  // Get socket ID\r\n  getSocketId() {\r\n    return this.socket ? this.socket.id : null;\r\n  }\r\n\r\n  // Disconnect\r\n  disconnect() {\r\n    if (this.socket) {\r\n      // Clean up all listeners\r\n      this.listeners.forEach((callbacks, event) => {\r\n        callbacks.forEach(callback => {\r\n          this.socket.off(event, callback);\r\n        });\r\n      });\r\n      this.listeners.clear();\r\n\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n    }\r\n  }\r\n\r\n  // Force reconnection\r\n  reconnect() {\r\n    if (this.socket) {\r\n      this.socket.connect();\r\n    }\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst socketService = new SocketService();\r\n\r\nexport default socketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}