{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SANAL\\\\chat-app\\\\frontend\\\\src\\\\components\\\\chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport UserList from './UserList';\nimport { getSocket, onMessage, offMessage, emitMessage, isSocketConnected } from '../services/socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  user\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n\n  // Scroll to bottom of messages\n  const scrollToBottom = useCallback(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, []);\n\n  // Handle received message\n  const handleMessageReceived = useCallback(message => {\n    try {\n      if (message && typeof message === 'object') {\n        setMessages(prevMessages => {\n          // Prevent duplicate messages\n          const messageExists = prevMessages.some(m => m.id === message.id || m.timestamp === message.timestamp && m.text === message.text && m.sender === message.sender);\n          if (!messageExists) {\n            return [...prevMessages, {\n              id: message.id || Date.now() + Math.random(),\n              text: message.text || '',\n              sender: message.sender || 'Unknown',\n              timestamp: message.timestamp || new Date().toISOString()\n            }];\n          }\n          return prevMessages;\n        });\n        scrollToBottom();\n      }\n    } catch (err) {\n      console.error('Error handling received message:', err);\n    }\n  }, [scrollToBottom]);\n\n  // Handle user list updates\n  const handleUserListUpdate = useCallback(users => {\n    try {\n      if (Array.isArray(users)) {\n        setOnlineUsers(users.filter(u => u && u.id));\n      }\n    } catch (err) {\n      console.error('Error updating user list:', err);\n    }\n  }, []);\n\n  // Handle typing indicators\n  const handleUserTyping = useCallback(data => {\n    try {\n      if (data && data.userId && data.userId !== (user === null || user === void 0 ? void 0 : user.id)) {\n        setTypingUsers(prev => {\n          const filtered = prev.filter(u => u.userId !== data.userId);\n          return data.isTyping ? [...filtered, data] : filtered;\n        });\n      }\n    } catch (err) {\n      console.error('Error handling typing indicator:', err);\n    }\n  }, [user === null || user === void 0 ? void 0 : user.id]);\n\n  // Handle connection status\n  const handleConnectionStatus = useCallback(connected => {\n    setIsConnected(connected);\n    if (connected) {\n      setError(null);\n    } else {\n      setError('Connection lost. Attempting to reconnect...');\n    }\n  }, []);\n\n  // Setup socket listeners\n  useEffect(() => {\n    const socket = getSocket();\n    // Copy the ref value at the start of the effect\n    const initialTypingTimeoutId = typingTimeoutRef.current;\n    if (!socket) {\n      setError('Socket connection not available');\n      setIsLoading(false);\n      return;\n    }\n    try {\n      // Connection status listeners\n      onMessage('connect', () => handleConnectionStatus(true));\n      onMessage('disconnect', () => handleConnectionStatus(false));\n      onMessage('connect_error', () => setError('Failed to connect to server'));\n\n      // Message and user listeners\n      onMessage('message_received', handleMessageReceived);\n      onMessage('user_list_updated', handleUserListUpdate);\n      onMessage('user_typing', handleUserTyping);\n\n      // Load initial messages\n      onMessage('message_history', history => {\n        try {\n          if (Array.isArray(history)) {\n            setMessages(history.map(msg => ({\n              id: msg.id || Date.now() + Math.random(),\n              text: msg.text || '',\n              sender: msg.sender || 'Unknown',\n              timestamp: msg.timestamp || new Date().toISOString()\n            })));\n          }\n        } catch (err) {\n          console.error('Error loading message history:', err);\n        } finally {\n          setIsLoading(false);\n        }\n      });\n\n      // Request initial data\n      if (isSocketConnected()) {\n        emitMessage('get_message_history');\n        emitMessage('get_online_users');\n        setIsConnected(true);\n        setIsLoading(false);\n      } else {\n        setTimeout(() => setIsLoading(false), 3000); // Timeout fallback\n      }\n    } catch (err) {\n      console.error('Error setting up socket listeners:', err);\n      setError('Failed to setup chat connection');\n      setIsLoading(false);\n    }\n\n    // Cleanup function\n    return () => {\n      try {\n        offMessage('connect');\n        offMessage('disconnect');\n        offMessage('connect_error');\n        offMessage('message_received');\n        offMessage('user_list_updated');\n        offMessage('user_typing');\n        offMessage('message_history');\n        if (initialTypingTimeoutId) {\n          clearTimeout(initialTypingTimeoutId);\n        }\n      } catch (err) {\n        console.error('Error cleaning up socket listeners:', err);\n      }\n    };\n  }, [handleMessageReceived, handleUserListUpdate, handleUserTyping, handleConnectionStatus]);\n\n  // Send message handler\n  const handleSendMessage = useCallback(messageText => {\n    try {\n      if (!messageText.trim() || !user) {\n        return false;\n      }\n      const message = {\n        text: messageText.trim(),\n        sender: user.username || user.name || 'Anonymous',\n        senderId: user.id,\n        timestamp: new Date().toISOString(),\n        id: Date.now() + Math.random()\n      };\n      if (isSocketConnected()) {\n        emitMessage('send_message', message);\n\n        // Optimistically add message to local state\n        setMessages(prev => [...prev, message]);\n        scrollToBottom();\n        return true;\n      } else {\n        setError('Not connected to server. Please try again.');\n        return false;\n      }\n    } catch (err) {\n      console.error('Error sending message:', err);\n      setError('Failed to send message');\n      return false;\n    }\n  }, [user, scrollToBottom]);\n\n  // Typing indicator handler\n  const handleTyping = useCallback(isTyping => {\n    try {\n      if (user && isSocketConnected()) {\n        emitMessage('typing', {\n          userId: user.id,\n          username: user.username || user.name,\n          isTyping\n        });\n      }\n    } catch (err) {\n      console.error('Error sending typing indicator:', err);\n    }\n  }, [user]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading chat...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this);\n  }\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-error\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"User information not available. Please log in again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-error-banner\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setError(null),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chat Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `connection-status ${isConnected ? 'connected' : 'disconnected'}`,\n        children: isConnected ? 'ðŸŸ¢ Connected' : 'ðŸ”´ Disconnected'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-main\",\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: messages,\n          currentUser: user,\n          typingUsers: typingUsers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n          onSendMessage: handleSendMessage,\n          onTyping: handleTyping,\n          disabled: !isConnected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-sidebar\",\n        children: /*#__PURE__*/_jsxDEV(UserList, {\n          users: onlineUsers,\n          currentUser: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"TznGnxRy8QygFC2NhiJlfas8TSk=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","MessageList","MessageInput","UserList","getSocket","onMessage","offMessage","emitMessage","isSocketConnected","jsxDEV","_jsxDEV","Chat","user","_s","messages","setMessages","onlineUsers","setOnlineUsers","isConnected","setIsConnected","isLoading","setIsLoading","error","setError","typingUsers","setTypingUsers","messagesEndRef","typingTimeoutRef","scrollToBottom","current","scrollIntoView","behavior","handleMessageReceived","message","prevMessages","messageExists","some","m","id","timestamp","text","sender","Date","now","Math","random","toISOString","err","console","handleUserListUpdate","users","Array","isArray","filter","u","handleUserTyping","data","userId","prev","filtered","isTyping","handleConnectionStatus","connected","socket","initialTypingTimeoutId","history","map","msg","setTimeout","clearTimeout","handleSendMessage","messageText","trim","username","name","senderId","handleTyping","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","currentUser","ref","onSendMessage","onTyping","disabled","_c","$RefreshReg$"],"sources":["C:/Users/SANAL/chat-app/frontend/src/components/chat.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport MessageList from './MessageList';\r\nimport MessageInput from './MessageInput';\r\nimport UserList from './UserList';\r\nimport { getSocket, onMessage, offMessage, emitMessage, isSocketConnected } from '../services/socket';\r\n\r\nconst Chat = ({ user }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [onlineUsers, setOnlineUsers] = useState([]);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [typingUsers, setTypingUsers] = useState([]);\r\n  \r\n  const messagesEndRef = useRef(null);\r\n  const typingTimeoutRef = useRef(null);\r\n\r\n  // Scroll to bottom of messages\r\n  const scrollToBottom = useCallback(() => {\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, []);\r\n\r\n  // Handle received message\r\n  const handleMessageReceived = useCallback((message) => {\r\n    try {\r\n      if (message && typeof message === 'object') {\r\n        setMessages(prevMessages => {\r\n          // Prevent duplicate messages\r\n          const messageExists = prevMessages.some(m => \r\n            m.id === message.id || \r\n            (m.timestamp === message.timestamp && m.text === message.text && m.sender === message.sender)\r\n          );\r\n          \r\n          if (!messageExists) {\r\n            return [...prevMessages, {\r\n              id: message.id || Date.now() + Math.random(),\r\n              text: message.text || '',\r\n              sender: message.sender || 'Unknown',\r\n              timestamp: message.timestamp || new Date().toISOString()\r\n            }];\r\n          }\r\n          return prevMessages;\r\n        });\r\n        scrollToBottom();\r\n      }\r\n    } catch (err) {\r\n      console.error('Error handling received message:', err);\r\n    }\r\n  }, [scrollToBottom]);\r\n\r\n  // Handle user list updates\r\n  const handleUserListUpdate = useCallback((users) => {\r\n    try {\r\n      if (Array.isArray(users)) {\r\n        setOnlineUsers(users.filter(u => u && u.id));\r\n      }\r\n    } catch (err) {\r\n      console.error('Error updating user list:', err);\r\n    }\r\n  }, []);\r\n\r\n  // Handle typing indicators\r\n  const handleUserTyping = useCallback((data) => {\r\n    try {\r\n      if (data && data.userId && data.userId !== user?.id) {\r\n        setTypingUsers(prev => {\r\n          const filtered = prev.filter(u => u.userId !== data.userId);\r\n          return data.isTyping ? [...filtered, data] : filtered;\r\n        });\r\n      }\r\n    } catch (err) {\r\n      console.error('Error handling typing indicator:', err);\r\n    }\r\n  }, [user?.id]);\r\n\r\n  // Handle connection status\r\n  const handleConnectionStatus = useCallback((connected) => {\r\n    setIsConnected(connected);\r\n    if (connected) {\r\n      setError(null);\r\n    } else {\r\n      setError('Connection lost. Attempting to reconnect...');\r\n    }\r\n  }, []);\r\n\r\n  // Setup socket listeners\r\n  useEffect(() => {\r\n    const socket = getSocket();\r\n    // Copy the ref value at the start of the effect\r\n    const initialTypingTimeoutId = typingTimeoutRef.current;\r\n    \r\n    if (!socket) {\r\n      setError('Socket connection not available');\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Connection status listeners\r\n      onMessage('connect', () => handleConnectionStatus(true));\r\n      onMessage('disconnect', () => handleConnectionStatus(false));\r\n      onMessage('connect_error', () => setError('Failed to connect to server'));\r\n      \r\n      // Message and user listeners\r\n      onMessage('message_received', handleMessageReceived);\r\n      onMessage('user_list_updated', handleUserListUpdate);\r\n      onMessage('user_typing', handleUserTyping);\r\n      \r\n      // Load initial messages\r\n      onMessage('message_history', (history) => {\r\n        try {\r\n          if (Array.isArray(history)) {\r\n            setMessages(history.map(msg => ({\r\n              id: msg.id || Date.now() + Math.random(),\r\n              text: msg.text || '',\r\n              sender: msg.sender || 'Unknown',\r\n              timestamp: msg.timestamp || new Date().toISOString()\r\n            })));\r\n          }\r\n        } catch (err) {\r\n          console.error('Error loading message history:', err);\r\n        } finally {\r\n          setIsLoading(false);\r\n        }\r\n      });\r\n\r\n      // Request initial data\r\n      if (isSocketConnected()) {\r\n        emitMessage('get_message_history');\r\n        emitMessage('get_online_users');\r\n        setIsConnected(true);\r\n        setIsLoading(false);\r\n      } else {\r\n        setTimeout(() => setIsLoading(false), 3000); // Timeout fallback\r\n      }\r\n\r\n    } catch (err) {\r\n      console.error('Error setting up socket listeners:', err);\r\n      setError('Failed to setup chat connection');\r\n      setIsLoading(false);\r\n    }\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      try {\r\n        offMessage('connect');\r\n        offMessage('disconnect');\r\n        offMessage('connect_error');\r\n        offMessage('message_received');\r\n        offMessage('user_list_updated');\r\n        offMessage('user_typing');\r\n        offMessage('message_history');\r\n        \r\n        if (initialTypingTimeoutId) {\r\n          clearTimeout(initialTypingTimeoutId);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error cleaning up socket listeners:', err);\r\n      }\r\n    };\r\n  }, [handleMessageReceived, handleUserListUpdate, handleUserTyping, handleConnectionStatus]);\r\n\r\n  // Send message handler\r\n  const handleSendMessage = useCallback((messageText) => {\r\n    try {\r\n      if (!messageText.trim() || !user) {\r\n        return false;\r\n      }\r\n\r\n      const message = {\r\n        text: messageText.trim(),\r\n        sender: user.username || user.name || 'Anonymous',\r\n        senderId: user.id,\r\n        timestamp: new Date().toISOString(),\r\n        id: Date.now() + Math.random()\r\n      };\r\n\r\n      if (isSocketConnected()) {\r\n        emitMessage('send_message', message);\r\n        \r\n        // Optimistically add message to local state\r\n        setMessages(prev => [...prev, message]);\r\n        scrollToBottom();\r\n        return true;\r\n      } else {\r\n        setError('Not connected to server. Please try again.');\r\n        return false;\r\n      }\r\n    } catch (err) {\r\n      console.error('Error sending message:', err);\r\n      setError('Failed to send message');\r\n      return false;\r\n    }\r\n  }, [user, scrollToBottom]);\r\n\r\n  // Typing indicator handler\r\n  const handleTyping = useCallback((isTyping) => {\r\n    try {\r\n      if (user && isSocketConnected()) {\r\n        emitMessage('typing', {\r\n          userId: user.id,\r\n          username: user.username || user.name,\r\n          isTyping\r\n        });\r\n      }\r\n    } catch (err) {\r\n      console.error('Error sending typing indicator:', err);\r\n    }\r\n  }, [user]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"chat-loading\">\r\n        <div className=\"loading-spinner\"></div>\r\n        <p>Loading chat...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!user) {\r\n    return (\r\n      <div className=\"chat-error\">\r\n        <p>User information not available. Please log in again.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      {error && (\r\n        <div className=\"chat-error-banner\">\r\n          <span>{error}</span>\r\n          <button onClick={() => setError(null)}>Ã—</button>\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"chat-header\">\r\n        <h2>Chat Room</h2>\r\n        <div className={`connection-status ${isConnected ? 'connected' : 'disconnected'}`}>\r\n          {isConnected ? 'ðŸŸ¢ Connected' : 'ðŸ”´ Disconnected'}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat-body\">\r\n        <div className=\"chat-main\">\r\n          <MessageList \r\n            messages={messages} \r\n            currentUser={user}\r\n            typingUsers={typingUsers}\r\n          />\r\n          <div ref={messagesEndRef} />\r\n          \r\n          <MessageInput \r\n            onSendMessage={handleSendMessage}\r\n            onTyping={handleTyping}\r\n            disabled={!isConnected}\r\n          />\r\n        </div>\r\n        \r\n        <div className=\"chat-sidebar\">\r\n          <UserList \r\n            users={onlineUsers} \r\n            currentUser={user}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}